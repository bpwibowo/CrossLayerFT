################################################################################
#
# Fault injection task generator
#
# First author: Bagus Wibowo
# created: 8/2/2014
################################################################################

import os
import sys

SIGNAL_PREFIX = "simulate.fabScalar."

def write_header(outfile):
  outfile.write('/*********************************************************\n')
  outfile.write(' *\n')
  outfile.write(' * Fault injection tasks source code\n')
  outfile.write(' * -- automatically generated by figen.py\n')
  outfile.write(' *\n')
  outfile.write(' *********************************************************/\n')
  outfile.write('\n')
  outfile.write('import "DPI-C" function void fi_dpi_register_signal(int id, ' +
    'string name, int max_entry, int max_offset);\n')

def write_footer(outfile):
  outfile.write('\n')
  outfile.write('// end of file\n')

def write_register_signals_task_header(outfile):
  outfile.write('\n')
  outfile.write('task register_signals;\n')

def write_register_signals_task_footer(outfile):
  outfile.write('endtask\n')

def write_inject_fault_task_header(outfile):
  outfile.write('\n')
  outfile.write('task inject_fault;\n')
  outfile.write('    input integer id, entry, offset;\n')
  outfile.write('    string signal_name;\n')
  outfile.write('    begin\n')
  outfile.write('\n')
  outfile.write('        case (id)\n')

def write_inject_fault_task_footer(outfile):
  outfile.write('            default: begin\n')
  outfile.write('                $display("Invalid id %1d", id);\n')
  outfile.write('            end\n')
  outfile.write('        endcase\n')
  outfile.write('\n')
  outfile.write('        $display("Fault injected at %s entry #%1d ' +
    'at offset %1d", signal_name, entry, offset);\n')
  outfile.write('\n')
  outfile.write('    end\n')
  outfile.write('endtask\n')

# open signal_list.txt
filepath = "signal_list.txt"
if not os.path.exists(filepath):
  print "Error: Could not find %s file" % filepath
  sys.exit(1)

list_file = open(filepath, "r")

# read input file
signal_cnt = 0
signal_name = []
signal_max_entry = []
signal_max_offset = []

for line in list_file:
  line = line.split("#")[0] # strip comments
  words = line.split()
  if len(words) >= 3:
    signal_name.append(words[0])
    signal_max_entry.append(words[1])
    signal_max_offset.append(words[2])
    signal_cnt += 1

list_file.close()

## write fi_tasks.sv
outfile = open("fi_tasks.sv", "w")

# write header
write_header(outfile)

# write register_signal task
write_register_signals_task_header(outfile)
for id in range(0, signal_cnt):
  outfile.write('    fi_dpi_register_signal(%d, "%s", %s, %s);\n' %
    (id, signal_name[id], signal_max_entry[id], signal_max_offset[id]))
write_register_signals_task_footer(outfile)

# write inject_fault task
write_inject_fault_task_header(outfile)
for id in range(0, signal_cnt):
  signal = SIGNAL_PREFIX+signal_name[id]
  outfile.write('            %d: begin\n' % id)
  outfile.write('                signal_name = "%s";\n' % signal_name[id])
  if signal_max_entry[id] is '1':
    outfile.write('                %s[offset] = ~%s[offset];\n' %
      (signal, signal))
  else:
    outfile.write('                %s[entry][offset] = ~%s[entry][offset];\n' %
      (signal, signal))
  outfile.write('            end\n')
write_inject_fault_task_footer(outfile)

# write footer
write_footer(outfile)

# end of file
