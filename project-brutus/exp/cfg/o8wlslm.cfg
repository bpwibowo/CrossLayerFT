# CORE OPTIONS ##############################################################

# core issues out-of-order
--core.ooo 1

# core fetches interleaved (able to cross cache lines w/o cti)
--core.fetch_interleaved 1

# do not stall loads on unknown store addresses during disambiguation. misspeculation causes a recovery
--core.loads_speculatively_execute 1
# loads speculatively wakeup depenedents. deschedule dependents on a cache miss.
--core.loads_speculatively_wakeup 0
# only process the load at the head of the load queue each cycle
--core.only_process_lq_head 1
# perfectly speculate on mem op aliasing
--core.exec_oracle_disambiguation 0

# issue from the issue queue based on age
--core.issue_oldest 0
# issue using pseudo round robin
--core.issue_rr 0

# core splits stores into two issues ---- store address and store data
--core.issue_split_stores 0
# (1) core issues nops into the execute pipe, or (0) just skips them
--core.issue_nops 0

# stall rename and dispatch if there's not a full bundle
--core.use_full_bundles 1
# core retires from multiple contexts in one cycle
--core.retire_multiple_contexts 0

# use shadow map tables for misprediction recovery
--core.recovery_smt 0
# recover from mispredicts when it'a at the al head
--core.recovery_al_head 1


# PIPELINE DIMENSIONS #######################################################

# width of processing core frontend -- fetch and decode stages
--core.width_frontend 8
# width of rename and dispatch stages
--core.width_dispatch 8
# width of processing core instruction issue (total)
--core.width_issue 12
# width of processing core issue (further restriction on mem ops)
--core.width_issue_mem 2
# width of processing core retirement (min: 3)
--core.width_retire 12

# latency of core frontend (from fetch to dispatch)
--core.latency_frontend 6


# BUFFER SIZES ##############################################################

# maximum number of simultaneous threads supported on a core
--core.max_contexts 1

# number of processing core renaming checkpoints
--core.num_checkpoints 64

# maximum number of inflight cti instructions per core
--core.size_cti_q 64
# size of processing core fetch queue
--core.size_fq 64
# size of processing core active list
--core.size_al 256
# size of processing core issue queue (int)
--core.size_iq_int 64
# size of processing core issue queue (fp)
--core.size_iq_fp 16
# size of processing core physical register file (int)
--core.size_prf_int 256
# size of processing core physical register file (fp)
--core.size_prf_fp 96
# size of processing core load queue
--core.size_lq 64
# size of processing core store queue
--core.size_sq 64
# size of memory dependence predictor
--core.size_mdp 1024
# size of processing core checker list (virtual window)
--core.size_checker_list 512


# EXECUTE LANES #############################################################

# bitmask descibing which execute lanes support mem insts
--core.execute_lanes_mem      000000000011
# bitmask descibing which execute lanes support cti insts
--core.execute_lanes_cti      000000000100
# bitmask descibing which execute lanes support int insts
--core.execute_lanes_int      111111111000
# bitmask descibing which execute lanes support fp insts
--core.execute_lanes_fp       111110000000
# bitmask descibing which execute lanes support llat int insts
--core.execute_lanes_llat_int 111111111000
# bitmask descibing which execute lanes support llat fp insts
--core.execute_lanes_llat_fp  111110000000

# execution latency of cache hitting load (at least 3)
--core.latency_ex_load 3
# execution latency of normal integer instructions (at least 1)
--core.latency_ex_int 1
# execution latency of normal fp instructions (at least 1)
--core.latency_ex_fp 5
# execution latency of integer long latency insts (e.g. div) (at least 1)
--core.latency_ex_llat_int 5
# execution latency of fp long latency insts (e.g. fdiv) (at least 1)
--core.latency_ex_llat_fp 5


# CACHES ####################################################################

# core fetches from a perfect instruction cache (no misses)
--core.ic_perfect 0
# number of cycles of latency to add to IC accesses
--core.ic_latency 1
# line size of processing core instruction cache (2^n bytes)
--core.ic_line_size 6
# number of ways in processing core instruction cache
--core.ic_ways 4
# number of sets in processing core instruction cache
--core.ic_sets 256
# number processing core inst $ miss--handling--service--registers
--core.ic_mhsrs 8
# number of sets in core instruction cache victim cache
--core.ic_victim_sets 0
# number of sets in core instruction cache victim cache
--core.ic_victim_ways 0
# number processing core inst $ writeout buffers
--core.ic_wobs 8
# enable instruction cache streambuffer
--core.ic_streambuffer 1
# instruction cache streambuffer depth
--core.ic_streambuffer_depth 4
# instruction cache streambuffer history buffers
--core.ic_streambuffer_hbs 16
# instruction cache streambuffer unit stride filters
--core.ic_streambuffer_usfs 16
# instruction cache streambuffer ways
--core.ic_streambuffer_ways 4

# core accesses data in a perfect data cache (no misses)
--core.dc_perfect 0
# number of cycles of latency to add to DC accesses
--core.dc_latency 1
# line size of processing core data cache (2^n bytes)
--core.dc_line_size 6
# number of ways in processing core data cache
--core.dc_ways 8
# number of sets in processing core data cache
--core.dc_sets 128
# number processing core data $ miss--handling--service--registers
--core.dc_mhsrs 32
# number of sets in core data cache victim cache
--core.dc_victim_sets 1
# number of sets in core data cache victim cache
--core.dc_victim_ways 16
# number processing core data $ writeout buffers
--core.dc_wobs 32
# enable data cache streambuffer
--core.dc_streambuffer 1
# data cache streambuffer depth
--core.dc_streambuffer_depth 4
# data cache streambuffer history buffers
--core.dc_streambuffer_hbs 16
# data cache streambuffer unit stride filters
--core.dc_streambuffer_usfs 16
# data cache streambuffer ways
--core.dc_streambuffer_ways 4

# enable private l2 caches
--core.l2_enable 1
# number of cycles of latency to add to L2 accesses
--core.l2_latency 15
# line size of processing core data cache (2^n bytes)
--core.l2_line_size 6
# number of ways in processing core data cache
--core.l2_ways 8
# number of sets in processing core data cache
--core.l2_sets 2048
# number processing core data $ miss--handling--service--registers
--core.l2_mhsrs 32
# number of sets in core data cache victim cache
--core.l2_victim_sets 1
# number of sets in core data cache victim cache
--core.l2_victim_ways 16
# number processing core L2 writeout buffers
--core.l2_wobs 32
# enable l2 cache streambuffer
--core.l2_streambuffer 1
# l2 cache streambuffer depth
--core.l2_streambuffer_depth 4
# l2 cache streambuffer history buffers
--core.l2_streambuffer_hbs 16
# l2 cache streambuffer unit stride filters
--core.l2_streambuffer_usfs 16
# l2 cache streambuffer ways
--core.l2_streambuffer_ways 4

# TLBS ######################################################################

# core uses a perfect itlb to decode addresses
--core.itlb_perfect 0
# itlb miss latency
--core.itlb_miss_latency 7
# number of page miss handlers in core itlb
--core.itlb_pmhs 1
# number of sets in core itlb
--core.itlb_sets 32
# number of sets in core itlb
--core.itlb_ways 4

# core uses a perfect dtlb to decode addresses
--core.dtlb_perfect 0
# dtlb miss latency
--core.dtlb_miss_latency 7
# number of page miss handlers in core dtlb
--core.dtlb_pmhs 1
# number of sets in core dtlb
--core.dtlb_sets 32
# number of sets in core dtlb
--core.dtlb_ways 4

# BRANCH PREDICTOR ##########################################################

# bpred type
# there is no branch predictor.  predict always returns false (declines).
--core.bpred_no_bpred 0
# branch predictor is perfect.  this only works in single--threaded apps.
--core.bpred_perfect 0
# branch predictor predicts backwards branches taken, forward not taken
--core.bpred_predict_backwards_taken 0
# branch predictor predicts forward branches taken, backwards not taken
--core.bpred_predict_forwards_taken 0
# branch predictor always predicts not taken
--core.bpred_predict_not_taken 0
# branch predictor always predicts taken
--core.bpred_predict_taken 0
# branch predictor uses gshare predictor for conds
--core.bpred_use_gshare 1
# branch predictor uses hybrid predictor for conds
--core.bpred_use_hybrid 0
# branch predictor uses ISL--TAGE predictor for conds
--core.bpred_use_isl_tage 0
# branch predictor uses local pas predictor for conds
--core.bpred_use_pas 0

# number of sets in bpred branch target buffer
--core.bpred_btb_sets 1024
# number of ways in bpred branch target buffer
--core.bpred_btb_ways 4
# add all cti insts to the btb
--core.bpred_btb_track_all 1

# number of return address stack entries
--core.bpred_ras_size 16
# number of entries in gshare table
--core.gshare_entries 65536
# number of entries in hybrid selector table
--core.hybrid_entries 65536
# number of pc entries in pas table
--core.pas_hist_entries 1024
# number of entries in pas table
--core.pas_pred_entries 65536

# ISL--TAGE 64KB configuration (CBP3)
--core.isl_tage_nhists 15
--core.isl_tage_logb 11
--core.isl_tage_hystshift 2
--core.isl_tage_logg 9
--core.isl_tage_phistwidth 16
--core.isl_tage_cwidth 3
--core.isl_tage_nstat 5
--core.isl_tage_cstat 6
--core.isl_tage_logstatcor 12
--core.isl_tage_minusestatcorthresh 5
--core.isl_tage_maxusestatcorthresh 31
--core.isl_tage_logl 6
--core.isl_tage_widthnbiterloop 10
--core.isl_tage_looptag 10
--core.isl_tage_minhist 8
--core.isl_tage_max_hist 2000
--core.isl_tage_tbist 6
--core.isl_tage_maxtbits 15
--core.isl_tage_logspec 6
--core.isl_tage_sharingtables 1
--core.isl_tage_besthistlen 1
--core.isl_tage_statcor 1
--core.isl_tage_ium 1
--core.isl_tage_looppred 1
--core.isl_tage_numalloc 3
--core.isl_tage_print_init_info 1
--core.isl_tage_shiftamnt 2

