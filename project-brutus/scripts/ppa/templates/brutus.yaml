### components ### 
# the basic building blocks are components and there are currently four types.
#
# - Logic: 
#   - this type represents the sequential and combinational logic in
#     a stage. 
#   - area, delay and energy numbers are retrieved from a database. the
#     component name and some knobs (e.g. fetch_width) are used to do the
#     lookup. see power_db.py for each stage's required parameters.
#   - the area, delay, energy numbers were taken after synthesis of the
#     entire stage, but do not include SRAMs or other custom devices, only standard
#     cells. the delay is the portion of the critical path that the standard cells
#     contribute. any SRAMs or other structures must be added to this delay to get
#     the true delay of the stage. 
#   - the area, delay and energy numbers retrieved from the database are for the 
#     entire component, not per 'way'. therefore, n instructions passing through
#     the stage constitutes one access, where n is the width of the stage. 
#
# - SRAM/CAM
#   - this type represents a static RAM or CAM.
#   - area, delay and energy are generated by FabMem.
#   - required parameters
#     - words: number of words in the memory.
#     - width: width of each word, in bits.
#     - read_ports: number of read-only ports.
#     - write_ports: number of write-only ports.
#     - read_accesses: number of read accesses.
#     - write_accesses: number of write accesses.
#   - these numbers are stored in a database after being generated to avoid
#     having to regenerate them.
#   - memories are limited to 45nm (FreePDK45), 512 words for RAMs and 256 words
#     for CAMs.
#   - ports are limited to either 2xR-xW or xR-xW for RAMS and xR-xW for CAMs,
#     where 1 <= x <= 8
#
# - CactiSRAM
#   - this type is another way of representing an SRAM.
#   - area, delay and energy are generated using cacti 6.5.
#   - required parameters
#     - words: number of words in the memory.
#     - width: width of each word, in bits.
#   - see cacti.py for all available parameters and default values.
#
# - Cache
#   - this type represents a cache, including tag and data arrays
#   - area, delay and energy are generated using cacti 6.5.
#   - required parameters
#     - sets: number of blocks in each way.
#     - block_size: width of each block, in bytes.
#   - see cacti.py for all available parameters and default values.
#
### stages ###
#
# stages require one or more components and one or more paths. each path is a
# list of components that forms a possible critical path through the stage. the
# delay of each component in a path is summed, and the path with the largest
# delay decides the total delay of that stage. the area and energy of the stage 
# includes the summation of all its components.
#
### cores ###
#
# - cores are made up of stages (e.g. rename) and loose components (e.g. L2
#   cache). 
# - the total area and energy of the core is the summation of all its
#   stages and components. 
# - the cycle_time of the core is, by default, the greatest
#   delay of a single stage in the list 'fetch_to_exe_stages'. if
#   perfect_pipelining is enabled, the total delay of all stages in
#   'fetch_to_exe_stages' is divided by 'fetch_to_exe_depth'. if
#   'fetch_to_exe_depth' is not specified, then the length of
#   'fetch_to_exe_stages' is used.
# - required parameters
#   - cycles: total number of cycles. this is used to calculate total energy
#   - fetch_to_exe_stages: list of the stages between fetch and execute
#     (inclusive).
#   - stages: list of stages in the core 
#
###
---
processor:
    tech: 45
    cores:
        core_0:
            # 1: OOO; 0: in-order
            out_of_order: {{ knobs['core_ooo'][0] }}

            # total cycles
            cycles: {{ stats['core_0.core.cycles'] }}

            # list of all stages from fetch to execute (inclusive).
            fetch_to_exe_stages: 
                - fetch_1
                - fetch_2
                - decode
                - rename_int
                - dispatch
                - issue
                - reg_read_int
                - execute

            # number of stages from fetch to execute. (perfect_pipelining only) 
            fetch_to_exe_depth: {{ knobs['core_latency_frontend'][0]+5 }}

            stages:
                fetch_1:
                    # list of timing paths. the maximum determines the delay of
                    # the stage
                    paths:
                        - [Fetch1Logic, BTB]
                        - [Fetch1Logic, BP]
                        - [L1ICache]
                    components:
                        Fetch1Logic:
                            type: Logic
                            fetch_width: {{ knobs['core_width_frontend'][0] }}
                            accesses: {{ stats['core_0.fetch.insts_fetched']//knobs['core_width_frontend'][0] }}
                        BTB:
                            type: CactiSRAM
                            words: {{ knobs['bpred_btb_sets'][0] }}
                            ways: {{ knobs['bpred_btb_ways'][0] }}
                            width: 32
                            read_ports: {{ knobs['core_width_frontend'][0] }}
                            write_ports: 1
                            read_accesses: {{ stats['core_0.fetch.insts_fetched'] }}
                            write_accesses: {{ stats['core_0.fetch.bp.btb_writes'] }}
                        BP: &BP_0
                            type: CactiSRAM
                            words: {{ knobs['gshare_entries'][0]|nearpow2 // 64 }}
                            width: 32
                            read_ports: 1
                            write_ports: 1
                            read_accesses: {{ stats['core_0.fetch.bp.cond_preds'] }}
                            write_accesses: {{ stats['core_0.fetch.bp.ctiq_reads'] }}
                        BP2: *BP_0
                        BP3: *BP_0
                        BP4: *BP_0
                        RAS:
                            type: SRAM
                            words: {{ knobs['bpred_ras_size'][0]|nearpow2 }}
                            width: 32
                            read_ports: 1
                            write_ports: 1
                            read_accesses: {{ stats['core_0.fetch.bp.ras_reads'] }}
                            write_accesses: {{ stats['core_0.fetch.bp.ras_writes'] }}
                        L1ICache:
                            type: Cache
                            sets: {{ knobs['core_ic_sets'][0] }}
                            block_size: {{ knobs['core_ic_line_size'][0] }}
                            ways: {{ knobs['core_ic_ways'][0] }}
                            read_ports: 1
                            write_ports: 1
                            read_accesses: {{ stats['core_0.fetch.ic.read_accesses'] }}
                            write_accesses: {{ stats['core_0.fetch.ic.fills'] }}
                fetch_2:
                    paths:
                        - [Fetch2Logic]
                    components:
                        Fetch2Logic:
                            type: Logic
                            fetch_width: {{ knobs['core_width_frontend'][0] }}
                            accesses: {{ stats['core_0.fetch.insts_fetched']//knobs['core_width_frontend'][0] }}
                        CTIQ:
                            type: SRAM
                            {#- possible bug in brutus prevents this from being lower than 64 #}
                            {#- words: {{ knobs['core_max_inflight_cti'][0] }} #}
                            words: 16
                            width: 32
                            read_ports: 1
                            write_ports: 1
                            read_accesses: {{ stats['core_0.fetch.bp.ctiq_reads'] }}
                            write_accesses: {{ stats['core_0.fetch.bp.ctiq_writes'] }}
                decode:
                    paths:
                        - [DecodeLogic, InstBuff]
                    components:
                        DecodeLogic:
                            type: Logic
                            fetch_width: {{ knobs['core_width_frontend'][0] }}
                            accesses: {{ stats['core_0.fetch.insts_fetched']//knobs['core_width_frontend'][0] }}
                        InstBuff:
                            type: SRAM
                            words: 8
                            width: 96
                            read_ports: {{ knobs['core_width_frontend'][0] }}
                            write_ports: {{ knobs['core_width_frontend'][0] }}
                            read_accesses: {{ stats['core_0.core.insts_dispatched'] }}
                            write_accesses: {{ stats['core_0.fetch.insts_fetched'] }}
                rename_int:
                    paths:
                        - [RenameLogic, RMT]
                        - [RenameLogic, Freelist]
                    components:
                        RenameLogic:
                            type: Logic
                            fetch_width: {{ knobs['core_width_frontend'][0] }}
                            accesses: {{ stats['core_0.core.insts_dispatched_int']//knobs['core_width_frontend'][0] }}
                        Freelist:
                            type: SRAM
                            words: {{ (knobs['core_size_prf'][0]//2-32)|nearpow2 }}
                            width: {{ (knobs['core_size_prf'][0]//2)|log2 }}
                            read_ports: {{ knobs['core_width_frontend'][0] }}
                            {#- use fetch_width instead of retire_width because of #}
                            {#- FabMem limitations #}
                            write_ports: {{ knobs['core_width_frontend'][0] }}
                            read_accesses: {{ stats['core_0.core.rmt_writes_int'] }}
                            {#- assume 80% of instructions have a destination reg #}
                            write_accesses: {{ (stats['core_0.core.insts_retired_int']*0.8)|int }}
                        RMT:
                            type: SRAM
                            words: 32
                            width: {{ (knobs['core_size_prf'][0]//2)|log2 }}
                            read_ports: {{ knobs['core_width_frontend'][0]*2 }}
                            write_ports: {{ knobs['core_width_frontend'][0] }}
                            read_accesses: {{ stats['core_0.core.rmt_reads_int'] }}
                            write_accesses: {{ stats['core_0.core.rmt_writes_int'] }}
                        AMT:
                            type: SRAM
                            words: 32
                            width: {{ (knobs['core_size_prf'][0]//2)|log2 }}
                            read_ports: {{ knobs['core_width_retire'][0] }}
                            write_ports: {{ knobs['core_width_retire'][0] }}
                            read_accesses: {{ stats['core_0.core.insts_retired_int'] }}
                            write_accesses: {{ stats['core_0.core.insts_retired_int'] }}
                rename_fp:
                    paths:
                        - [RenameLogic, RMT]
                        - [RenameLogic, Freelist]
                    components:
                        RenameLogic:
                            type: Logic
                            fetch_width: {{ knobs['core_width_frontend'][0] }}
                            accesses: {{ stats['core_0.core.insts_dispatched_fp']//knobs['core_width_frontend'][0] }}
                        Freelist:
                            type: SRAM
                            words: {{ (knobs['core_size_prf'][0]//2-32)|nearpow2 }}
                            width: {{ (knobs['core_size_prf'][0]//2)|log2 }}
                            read_ports: {{ knobs['core_width_frontend'][0] }}
                            {#- use fetch_width instead of retire_width because of #}
                            {#- FabMem limitations #}
                            write_ports: {{ knobs['core_width_frontend'][0] }}
                            read_accesses: {{ stats['core_0.core.rmt_writes_fp'] }}
                            {#- assume 80% of instructions have a destination reg #}
                            write_accesses: {{ (stats['core_0.core.insts_retired_fp']*0.8)|int }}
                        RMT:
                            type: SRAM
                            words: 32
                            width: {{ (knobs['core_size_prf'][0]//2)|log2 }}
                            read_ports: {{ knobs['core_width_frontend'][0]*2 }}
                            write_ports: {{ knobs['core_width_frontend'][0] }}
                            read_accesses: {{ stats['core_0.core.rmt_reads_fp'] }}
                            write_accesses: {{ stats['core_0.core.rmt_writes_fp'] }}
                        AMT:
                            type: SRAM
                            words: 32
                            width: {{ (knobs['core_size_prf'][0]//2)|log2 }}
                            read_ports: {{ knobs['core_width_retire'][0] }}
                            write_ports: {{ knobs['core_width_retire'][0] }}
                            read_accesses: {{ stats['core_0.core.insts_retired_fp'] }}
                            write_accesses: {{ stats['core_0.core.insts_retired_fp'] }}
                dispatch:
                    paths:
                        - [DispatchLogic]
                    components:
                        DispatchLogic:
                            type: Logic
                            fetch_width: {{ knobs['core_width_frontend'][0] }}
                            issue_width: {{ knobs['core_width_issue'][0] }}
                            accesses: {{ stats['core_0.core.insts_dispatched']//knobs['core_width_frontend'][0] }}
                # unified issue queue
                issue:
                    paths:
                        - [IssueLogic, Src1CAM]
                        - [IssueLogic, PayloadRAM]
                    components:
                        IssueLogic:
                            type: Logic
                            fetch_width: {{ knobs['core_width_frontend'][0] }}
                            issue_width: {{ knobs['core_width_issue'][0] }}
                            size_iq: {{ knobs['core_size_iq'][0]|nearpow2 }}
                            accesses: {{ stats['core_0.core.insts_issued']//knobs['core_width_issue'][0] }}
                        PayloadRAM:
                            type: SRAM
                            words: {{ knobs['core_size_iq'][0]|nearpow2 }}
                            width: 64
                            read_ports: {{ knobs['core_width_issue'][0]*2 }}
                            {#- dont use fetch_width because of FabMem limitations #}
                            write_ports: {{ knobs['core_width_issue'][0] }}
                            read_accesses: {{ stats['core_0.core.insts_issued'] }}
                            write_accesses: {{ stats['core_0.core.insts_dispatched'] }}
                        Src1CAM: &SrcCAM_0
                            type: CAM
                            words: {{ knobs['core_size_iq'][0]|nearpow2 }}
                            width: {{ knobs['core_size_prf'][0]|log2 }}
                            read_ports: {{ knobs['core_width_issue'][0] }}
                            write_ports: {{ knobs['core_width_issue'][0] }}
                            read_accesses: {{ stats['core_0.core.iq_reads'] }}
                            write_accesses: {{ stats['core_0.core.iq_writes'] }}
                        Src2CAM: *SrcCAM_0
                reg_read_int:
                    paths:
                        - [RegReadLogic, RegFile]
                    components:
                        RegReadLogic:
                            type: Logic
                            issue_width: {{ knobs['core_width_issue'][0] }}
                            accesses: {{ stats['core_0.core.insts_issued_int']//knobs['core_width_issue'][0] }}
                        RegFile:
                            type: SRAM
                            words: {{ (knobs['core_size_prf'][0]//2)|nearpow2 }}
                            width: 32
                            read_ports: {{ knobs['core_width_issue'][0]*2 }}
                            write_ports: {{ knobs['core_width_issue'][0] }}
                            read_accesses: {{ stats['core_0.exec.prf_reads_int'] }}
                            write_accesses: {{ stats['core_0.exec.prf_writes_int'] }}
                reg_read_fp:
                    paths:
                        - [RegReadLogic, RegFile]
                    components:
                        RegReadLogic:
                            type: Logic
                            issue_width: {{ knobs['core_width_issue'][0] }}
                            accesses: {{ stats['core_0.core.insts_issued_fp']//knobs['core_width_issue'][0] }}
                        RegFile:
                            type: SRAM
                            words: {{ (knobs['core_size_prf'][0]//2)|nearpow2 }}
                            width: 64
                            read_ports: 1
                            write_ports: 1
                            read_accesses: {{ stats['core_0.exec.prf_reads_fp'] }}
                            write_accesses: {{ stats['core_0.exec.prf_writes_fp'] }}
                execute:
                    paths:
                        - [ExecuteMLogic]
                        - [ExecuteCtrlLogic]
                        - [ExecuteSLogic]
                        - [ExecuteCLogic]
                    components:
                        ExecuteMLogic:
                            type: Logic
                            accesses: {{ stats['core_0.exec.insts_executed_mem'] }}
                        ExecuteCtrlLogic:
                            type: Logic
                            accesses: {{ stats['core_0.exec.insts_executed_cti'] }}
                        ExecuteSLogic:
                            type: Logic
                            accesses: {{ stats['core_0.exec.insts_executed_simple'] }}
                        ExecuteCLogic:
                            type: Logic
                            depth: 16
                            accesses: {{ stats['core_0.exec.insts_executed_complex'] }}
                lsu:
                    paths:
                        - [LSULogic, LDQ_CAM]
                        - [L1DCache]
                    components:
                        LSULogic:
                            type: Logic
                            issue_width: {{ knobs['core_width_issue'][0] }}
                            retire_width: {{ knobs['core_width_retire'][0] }}
                            size_lsq: {{ knobs['core_size_lq'][0]|nearpow2 }}
                            # lsu access includes a load and a store
                            accesses: {{ stats['core_0.exec.insts_executed_mem']//2 }}
                        LDQ_CAM:
                            type: CAM
                            words: {{ knobs['core_size_lq'][0]|nearpow2 }}
                            width: 32
                            read_ports: 1
                            write_ports: 1
                            read_accesses: {{ stats['core_0.exec.insts_executed_store'] }}
                            write_accesses: {{ stats['core_0.exec.insts_executed_load'] }}
                        STQ_CAM:
                            type: CAM
                            words: {{ knobs['core_size_sq'][0]|nearpow2 }}
                            width: 32
                            read_ports: 1
                            write_ports: 1
                            read_accesses: {{ stats['core_0.exec.insts_executed_load'] }}
                            write_accesses: {{ stats['core_0.exec.insts_executed_store'] }}
                        LAST_ST_CAM:
                            type: CAM
                            words: {{ knobs['core_size_lq'][0]|nearpow2 }}
                            width: 4
                            read_ports: 1
                            write_ports: 1
                            read_accesses: {{ stats['core_0.exec.insts_executed_load'] }}
                            write_accesses: {{ stats['core_0.exec.insts_executed_load'] }}
                        STQ_DATA_RAM:
                            type: SRAM
                            words: {{ knobs['core_size_sq'][0]|nearpow2 }}
                            width: 32
                            read_ports: 1
                            write_ports: 1
                            {#- FIXME: assume 80% of stores retire #}
                            read_accesses: {{ (stats['core_0.exec.insts_executed_store']*0.8)|int }}
                            write_accesses: {{ stats['core_0.exec.insts_executed_store'] }}
                        L1DCache:
                            type: Cache
                            sets: {{ knobs['core_dc_sets'][0] }}
                            block_size: {{ knobs['core_dc_line_size'][0] }}
                            ways: {{ knobs['core_dc_ways'][0] }}
                            read_ports: 1
                            write_ports: 1
                            rw_ports: 1
                            read_accesses: {{ stats['core_0.exec.dc.read_accesses']+stats['core_0.exec.dc.writebacks'] }}
                            write_accesses: {{ stats['core_0.exec.dc.write_accesses']+stats['core_0.exec.dc.fills'] }}
                retire:
                    paths:
                        - [RetireLogic, ActiveList]
                    components:
                        RetireLogic:
                            type: Logic
                            fetch_width: {{ knobs['core_width_frontend'][0] }}
                            issue_width: {{ knobs['core_width_issue'][0] }}
                            retire_width: {{ knobs['core_width_retire'][0] }}
                            accesses: {{ stats['core_0.core.insts_retired_int']//knobs['core_width_retire'][0] }}
                        ActiveList:
                            type: SRAM
                            words: {{ knobs['core_size_al'][0]|nearpow2 }}
                            width: 32
                            read_ports: {{ knobs['core_width_retire'][0] }}
                            write_ports: {{ knobs['core_width_frontend'][0] }}
                            read_accesses: {{ stats['core_0.core.insts_retired'] }}
                            write_accesses: {{ stats['core_0.core.insts_dispatched'] }}
            components:
                L2:
                    type: Cache
                    sets: {{ knobs['core_l2_sets'][0] }}
                    block_size: {{ knobs['core_l2_line_size'][0] }}
                    ways: {{ knobs['core_l2_ways'][0] }}
                    rw_ports: 2
                    banks: 4
                    read_accesses: {{ stats['core_0.l2.read_accesses']+stats['core_0.l2.writebacks'] }}
                    write_accesses: {{ stats['core_0.l2.write_accesses']+stats['core_0.l2.fills'] }}

    components:
        L3:
            type: Cache
            sets: {{ knobs['l3_sets'][0] }}
            block_size: {{ knobs['l3_line_size'][0] }}
            ways: {{ knobs['l3_ways'][0] }}
            rw_ports: 2
            banks: 8
            read_accesses: {{ stats['l3.read_accesses']+stats['l3.writebacks'] }}
            write_accesses: {{ stats['l3.write_accesses']+stats['l3.fills'] }}


